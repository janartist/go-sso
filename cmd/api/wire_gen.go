// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"sso/internal/biz"
	"sso/internal/conf"
	"sso/internal/data"
	"sso/internal/server"
	"sso/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, casbin *conf.Casbin, logger log.Logger) (*kratos.App, func(), error) {
	client, err := data.NewRedis(confData)
	if err != nil {
		return nil, nil, err
	}
	db, err := data.NewDatabase(confData)
	if err != nil {
		return nil, nil, err
	}
	clientStore := data.NewAuthClientStore(db)
	dataData, cleanup, err := data.NewData(logger, db, client)
	if err != nil {
		return nil, nil, err
	}
	authRepo := data.NewAuthRepo(dataData)
	oauth2Server := biz.NewOauth2Server(client, clientStore, authRepo, logger)
	casbinWatcherEx := biz.NewCasbinWatcherEx()
	bizCasbin := biz.NewCasbinFromGorm(db, casbinWatcherEx, casbin)
	model := biz.RABCModelWithIpMatch(casbin)
	enforcer, err := biz.NewEnforcer(bizCasbin, model)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authService := service.NewAuthService(oauth2Server, enforcer)
	grpcServer := server.NewGRPCServer(confServer, authService, logger)
	ssoService := service.NewSSOService(enforcer)
	casbinService := service.NewCasbinService(enforcer)
	httpServer := server.NewHTTPServer(confServer, authService, ssoService, casbinService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
