// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.9
// source: sso/v1/sso.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSSOUserList = "/api.sso.v1.SSO/UserList"

type SSOHTTPServer interface {
	UserList(context.Context, *UserListRequest) (*UserListReply, error)
}

func RegisterSSOHTTPServer(s *http.Server, srv SSOHTTPServer) {
	r := s.Route("/")
	r.GET("/sso/user/list", _SSO_UserList0_HTTP_Handler(srv))
}

func _SSO_UserList0_HTTP_Handler(srv SSOHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSSOUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserList(ctx, req.(*UserListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserListReply)
		return ctx.Result(200, reply)
	}
}

type SSOHTTPClient interface {
	UserList(ctx context.Context, req *UserListRequest, opts ...http.CallOption) (rsp *UserListReply, err error)
}

type SSOHTTPClientImpl struct {
	cc *http.Client
}

func NewSSOHTTPClient(client *http.Client) SSOHTTPClient {
	return &SSOHTTPClientImpl{client}
}

func (c *SSOHTTPClientImpl) UserList(ctx context.Context, in *UserListRequest, opts ...http.CallOption) (*UserListReply, error) {
	var out UserListReply
	pattern := "/sso/user/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSSOUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
